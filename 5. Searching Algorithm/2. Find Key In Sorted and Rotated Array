//PREPBYTES

package practiceSession1;
import java.util.*;
public class testPractice {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int T=sc.nextInt();
		while(T-->0) {
			int N=sc.nextInt();
			int[] arr=new int[N];
			for(int i=0; i<N; i++) {
				arr[i]=sc.nextInt();
			}
			int key=sc.nextInt();
			
			int search=binarySearch(arr,0,N-1,key);
			int pivot=findPivot(arr,0,N-1);
			int keyIndex=findKey(arr,N,key);
			System.out.println(keyIndex);
		}
	}
	static int binarySearch(int[] arr,int start, int end, int key) {
		if(end<start) return -1;
		int mid=start+(end-start)/2;
		if(key==arr[mid])
			return mid;
		if(key>arr[mid])
			return binarySearch(arr,(mid+1),end,key);
		return binarySearch(arr,start,(mid-1),key);
	}
	
	static int findPivot(int[] arr,int start, int end) {
		if(end<start) return -1;
		int mid=start+(end-start)/2;
		
		if(mid<end && arr[mid]>arr[mid+1])
			return mid+1;
		if(mid>start && arr[mid]<arr[mid-1])
			return mid;
		if(arr[mid]<arr[start])
			return findPivot(arr,start,mid-1);
		return findPivot(arr,mid+1,end);
		
	}
	
	static int findKey(int[] arr, int n, int key) {
		int pivot=findPivot(arr,0,n-1);
		if(pivot==-1)
			return binarySearch(arr,0,n-1,key);
		if(arr[pivot]==key)
			return pivot;
		if(arr[0]<key)
			return binarySearch(arr,0,pivot-1,key);
		return binarySearch(arr,pivot+1,n-1,key);
		
	}
}
