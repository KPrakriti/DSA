//An element which appears more than n/2 times is a majority elemnet.

//Approach 1 - Brute Force using nested for loop - TC O(N^2) SC O(1)

class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length; 
        int count;
        int ans = 0;
        for(int i = 0; i<len; i++)
        {
            count = 0;
            for(int j = 0; j<len; j++)
            {
                if(nums[i] == nums[j])
                {
                    count++;
                    if(count>len/2)
                    {
                        ans = nums[j];
                        break;
                    }
                }
            }
        }
        return ans;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Approach 2 - We sort the array and the element at index n/2 will always be a majority elemnent.
//TC - O(NlogN) SC - O(1)

class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length;
        
        Arrays.sort(nums);
        int ans = nums[len/2];
        
        return ans;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Approach 3 - Moore's Voting Algorithm - TC O(N) SC O(1)

class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length; 
        int majorEl = 0;
        int count = 1;
        int ans = 0;
        
        //run loop from i = 1
        for(int i = 1; i<len; i++)
        {
            if(nums[majorEl] == nums[i])
            {
                count++;
            }
            else
            {
                count--;
            }
            if(count == 0)
            {
                majorEl = i;
                count = 1;
            }
        }
        count = 0;
        for(int i = 0; i<len; i++)
        {
            if(nums[i] == nums[majorEl])
            {
                count++;
                if(count>len/2)
                {
                    ans = nums[majorEl];
                }
            }
        }
        return ans;
    }
}
