//Leetcode - https://leetcode.com/problems/third-maximum-number/

class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        int n=nums.length;
        Integer max1=nums[n-1];
        Integer max2=null;
        Integer max3=null;
        boolean containsZero=false;
        if(n<3)
        {
            return nums[n-1];
        }
        
        if(n==3)
        {
            if(nums[0] != nums[1] && nums[0] != nums[2] && nums[1] != nums[2])
            {
                return nums[0];
            }
            else
            {
                return nums[2];
            }
        }
        
        for(int i=n-2; i>=0; i--)
        {
            if(nums[i] != max1 && max2==null)
            {
                max2=nums[i];
            }
            else if(nums[i] == max1 || nums[i]==max2)
            {
                continue;
            }
            else if(max1 !=null && max2 !=null && max3==null)
            {
                if(nums[i] !=max2)
                {
                    max3=nums[i]; 
                }
                else
                {
                    continue;
                }
            }
        }
        if(max3==null)
        {
            max3=max1;
        }
        return max3;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH 2: Use TreeSet Data Structure
class Solution {
    public int thirdMax(int[] nums) {
        
        TreeSet<Integer> treeSet=new TreeSet<>();
        int n=nums.length;
        for(int i=0; i<n; i++)
        {
            treeSet.add(nums[i]); //O(NlogN)
        }
        int distinctLength=treeSet.size();
        Integer arr[]=new Integer[distinctLength];
        arr=treeSet.toArray(arr);
        if(distinctLength<3)
        {
            return arr[distinctLength-1];
        }
       return arr[distinctLength-3];
    }
}
