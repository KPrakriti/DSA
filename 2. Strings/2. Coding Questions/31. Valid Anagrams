//TC - 2*O(logN)
//SC - 2*O(length of strings)

class Solution {
    public boolean isAnagram(String s, String t) {
        
        //I just need to check if both s and t are anagrams of each other.
        boolean result = false;

        char charArrayS[] = s.toCharArray();
        char charArrayT[] = t.toCharArray();

        Arrays.sort(charArrayS);
        Arrays.sort(charArrayT);

        s = String.valueOf(charArrayS);
        t = String.valueOf(charArrayT);

        if(s.equals(t))
        {
            result = true;
        }
        else if(!s.equals(t))
        {
            result = false;
        }
        return result;
    }
}

Approach 2 : TC - O(N) 
             SC - O(1)

class Solution {
    public boolean isAnagram(String s, String t) {
        
        if(s.length() != t.length()) return false;


        int anagramArr[] = new int[26];
        boolean result = true;

        if(s.length() == t.length())
        {
            for(int i = 0; i<s.length(); i++)
            {
                anagramArr[s.charAt(i)-'a']++;
            }

            for(int j = 0; j<t.length(); j++)
            {
                anagramArr[t.charAt(j)-'a']--;
            }

        }

        for(int i =0; i<anagramArr.length; i++)
        {
            if(anagramArr[i] != 0)
            {
                result = false;
            }

        }

        return result;
    }
}
